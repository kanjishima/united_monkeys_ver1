このファイルは次に何をするべきかについて書かれています。
このファイルはバグ以外の備忘録として書かれているため、
bashコマンド、DBコマンド、等のチートシートとしても書かれます。
//imgs;) Infinite Monkeys on Giant's Sholder 



誰がが絶対やるべきだと思う仕事
をやりなさい、やればよいのです。
http://business.nikkeibp.co.jp/atcl/report/16/120500090/122900003/?P=4&ST=smart


/煩雑化したファイル構造を修正する。
・あるべきファイル構造とは？
MAIN    元となるフォルダ
    containar   ほとんどこのフォルダ内の編集をすることになる。   
        controllers     SNS部分のC
            router
        models          SNS部分のM
            model
        views           SNS部分のV
            HOME            各ページ毎のフォルダ
                assets          リソースフォルダ
                    css         CSSのフォルダ
                    fonts       フォント用の予備フォルダ
                    images      画像のフォルダ
                    js          ページ装飾のJSファイル（JSの分類については別記）
                    sass        SASS用の予備フォルダ
                index.ejs       ejsファイル。
            /
            /
            /
            xPublic
                assets
                    css         CSSのフォルダ
                    fonts       フォント用の予備フォルダ
                    images      画像のフォルダ
                    js          ページ装飾のJSファイル（JSの分類については別記）
                    sass        SASS用の予備フォルダ
                ejs         ejsファイル。
        xGames         ゲーム部分のフォルダ管理。各ゲームは独立している。
            eachGames   ゲームoxのフォルダ
                controllers ゲームoxのC
                models      ゲームoxのM    
                views       ゲームoxのV
                    assets
                        css         CSSのフォルダ
                        fonts       フォント用の予備フォルダ
                        images      画像のフォルダ
                        js          ページ装飾のJSファイル（JSの分類については別記）
                        sass        SASS用の予備フォルダ
                    ejs         ejsファイル
                xPublic     ゲームoxのリソースフォルダ
            /
            /
            /
            /
            xPublic
        xPublic         
    node_modules    ノードの仕様による、インクルードファイルズ
    app.js          ノードの仕様による、キッカーファイル
    bugsLife        バグの記録と解決策の記述。
    package.json    ノードの仕様による、クローン時の環境設定の記録
    tasks           次にやるべきことを記録。終わったら該当箇所を消す。
・SNS部分をメインにし第一階層にMVC＋を設置。
　xxGamesフォルダに各ゲームのフォルダを直接配置する。
　各々の部品（SNS、ゲーム１、ゲーム２、、、）においてMVC＋を管理。
・views/homeフォルダを適正化
・xxGamesに変更
・tp_kids〜を変更（クレジット、当該参照ページを記録。公開時の変更についてメモすること）

/SNS機能の作り込み
・チャット
・電話
・メッセージ
・アイコン指定
・ゲームの実績
・文章の編集機能
・自分のページの編集ページ

/年間スケジュールを立てる
・月ごとの目標を立てる
・いつローンチする？
・どのタイミングでマネタイズする？
・どのタイミングで人を雇う？
・「α版の公開」と「β版の立ち上げ計画」
・資金計画？


/Identify New confirm User
/and user's privatePage;)

/gameTable seated/not_yet/leave_seat option and seatingButton!(and leavingButton)

/osero optimize sockets version
/avoid include
/optimize include
=>solo version in socketsProject
/descrive socketRouter for osero

//staticファイルの読み込みについて
静的ファイルはappでexpressで記述されている。がファイル構成（xGameにポン）ならxPublicは
増える。ので、static宣言を複数してやれば、よいらしい。上で見つからなければ、下、下で見つか
らなければ、さらに下。と。
気になることは
・express４からexpress.staticがサポ‐トされていないと書いてあるのに動くこと。
とりあえずほかのファイルは動いたが、
・audioファイルが動かないこと
audioファイルはwebSocketを使っているので、またややこしそう。

//ファイル構成について
controllers　　ルーティングにかかるすべて
models　　　　　モデルにかかるすべて
views　　　　　ビューにかかるすべて
xPublic　　　　静的なファイルすべて
index
が基本構造。
GameのインストールはxGamesにフォルダをポンとやって、app.jsをチョロッと
変更すれば、もう大丈夫な感じにするべき。

//認証について
socketが閉じる。sessionも閉じる。となると、どうやって本人確認をとるのか。
堅牢なシステムに後々するべきであることは明白である。



//今後実装予定のゲーム一覧
アシンクゲームコーディング
ジャンケン
オセロ
ショーギ
ババ抜き
マージャン
シチナラベ
ドミノ
キング


/基礎となる４つの画面
ログイン画面
広場ホーム画面
ゲーム画面
ユーザーホーム画面


/ ログインとかの考え方
正しいユーザーが
正しいリクエストを
することでしかレスポンスをかえさない。

/whereプロパティについて（セッション管理について）
whereプロパティによって強制的にルーティンぐする。
whereプロパティによってユーザーの状態を管理し、
違法なアクセスは強制ルーティンぐする。

/ゲーム参加ルームとか
・テーブルをつくったら、場所固定。
・ゲームが終わる、棄権する⇨ルームを離れる。

/ユーザーの実績票を作る。
・クリエイトテーブル情報、
・離脱棄権情報、
・他のユーザーからの評価、
・各ゲームの実績、
・ユーザーページurl



/ゲームクリエイトオブジェクト
・ゲームコンポーネント、
⇨本物のやつのコンポーネントをそのまま丸写しする
・ゲームエレメント、
⇨コンポーネントやルールが示すゲーム上意味がある領域の定義。メタゲームエレメント【プレイヤー情報】など。
・ゲームシークエンス、
⇨ゲームのルール。メタ情報【スコアボード】、初期配置、処理の順番終了条件
（上記の捉え方を明確に定義しておくことで、ゲーム実装開発のスピードが決まる。）



/各ゲーム開発の方針
なるべく単一のやり方を決める。
例）ソケットの扱いのルール化、など。
xGamesフォルダにボコッと対象フォルダを入れるだけで、
すむようにする。その中に「ゲームINDEX」みたいな
READMEみたいなファイルを入れる。これに書かれている
ことを基準になんかする。
ジェンガからシビライゼーションまで行えること。
それら多彩な要素を持つゲームを機能的に分類し、
現実ライクに行うこと。
※コンポーネントの大きな/多いゲームはスマホではできません。
なぜなら大きいから持ち運びは困難だからです。（…という
直感性に訴えながら、実際はスマホの小さな画面ではプレイ感
が著しく損なわれると考えられたゲームはできない。）

/開発の大別
・会員サイト機能の実装
・ゲームシステム機能の開発
・各ゲームの実装
の３種類。




//ユーザーのプライオリティーロイヤリティーについて
下記三者がグッドプラクティスっぽい。
・ゲスト【非会員】
    テーブルクリエイト権限なし
    情報は24時間で破棄
    単一アイコン、ブリッジなし
    初心者卓が用意されていてゲストのみ参加できる卓がある。
    三種類くらいのゲームが選べる。
・ユーザー【登録会員】
    テーブルクリエイト権限
    限られたゲームのクリエイト権限
    永続保持
    アイコンカスタマイズ、ブリッジあり
・プレミアムユーザー【有料会員】
    テーブルクリエイト権限
    より解放されたゲームのクリエイト権限
    永続保持
    アイコンカスタマイズ、ブリッジあり
    
/ゲストログイン
初めて来た人に体験版として利用してもらえる。
カスタマイズ権限を極力無くし、本当の「ゲスト」として
ゲームを体験してもらう。
MOみたいに「ゲストログイン」をトップに配置しておく。
「ゲストN番」だと大切にされてない感があるので、
お名前だけお伺いする。
「ゲスト：ほにゃらら様」となる。

/ユーザー認証
・Eメールで登録
・他のsnsと連携
⇨簡単、かつ、次のステップ（つまり課金/プレミアム化）が
　簡単になるように。

/UIについての参考
・そのワンクリック、ワンタイプが心理的な障壁になる。
ユーザーはとにかく何も知らない。直感的に操作できること、
フラッと来てフラっとプレイできる、気が向いたら登録できる、
・気が向いたら購入できる。
・直感的な操作とは？いままで慣れてきた操作と違和感が無い、という直感性
・中島悟の右クリック。頻度の多い操作に手順の少ないアクションを割り振る
一番簡単なはずのログイン画面の例
⇨セッションログインの必要性
『ボタン』装飾での給油間違いの例

//インセンティブ（購買や大会参加）について
・アマゾンで物理買うとおまけで回数限定のプレイチケットが貰える
（前提としてアマゾンアフィリエイト）
・大会勝つと特別エディションの物理が貰える、あるいは選択で別のプライズが貰える
（「勝ちたい」「参加したい」「大会という体験」「褒賞」というインセンティブ）



//UMOGのコンセプトと展開
・見た目の改造
    使いやすさ、体験の良さがなければ微塵も意味がない。
・スカイプ連携
    音声チャット体験がないならば「使い易いBGA」程度に
    しかならない。「半ライブゲーム体験」を作る。
・イラストレーター
    ・ゲームのアイコンとなるイラストレーターが必要（@youmask）。
    ・サイト全体のUIをバシバシ作れるWEBデザイナー。
・業務提携
    ポータルサイトはコンテンツ。国内外のエキサイティングな
    board gameメーカーと業務提携。独占オンラインゲーミング販売。
    無料でオンラインゲームをすることは可能だが、有料でオンライン
    ゲームを販売することを禁ずる。（同じようなポータルサイトでの
    販売を禁ずるもので、個別アプリ、無料ゲームでの提供は可能。ただし
    個別アプリや無料ゲームは推奨はしない。）
・弁理士/弁護士
    コンテンツビジネス。版権問題についてつまづきたくない。
    ゲームを開発する上でも何か特許を得る上でも、何かと
    相談したい。ドイツ、アメリカ等の海外での知識が豊富
    であれば、大変に嬉しい。
・宣伝戦略
    正直広告はあまり出したくない。ゆっくり人が増えないと
    捌き切れない。
・基本的な考え方
    『オンラインでボードゲームを心底楽しむ』という価値を提供する。
    『ボードゲームは集まりでやるもの、集まらないと楽しく無い』という常識を超えること。
    『オンラインボードゲーミングには莫大な潜在ニーズある』ことをよく理解すること。

//超概算
    1000ユーザーで一人養える
    100000ユーザー日本
    五人に一人が月2300円課金
    世界中のオンラインボードゲーマーを虜にする
    2000000ユーザー世界



//重要そうなモジュール
・ギアハルク.js
    カードを使ってコードをかける
    タイプ、対象、等
    ボードゲームをコーディングするのに特化
    ⇨効率的なボードゲームコーディングのため
・ese3D.js
    essencial sight emulated
    イメージ画像を3Dに見せるエフェクト
    ⇨単純なソースから3Dのような質感を効率的に再現するため



/完璧なジャンケン実装計画とは
以下の要件を満たすじゃんけんの実装である。
・会話機能付き、
⇨スカイウェイでの実装。PCtoPC、toIPHONE、toAndroidの三者。
・ゲームメッセージ機能、
⇨汎用性のゲームメッセージ機能の実装。
・ゲーム実績情報、
⇨ゲーム実績が蓄積される。先にユーザー周りの機能が実装される。
・ばこんとはまる、
⇨完全に独立したフォルダをはめ、DBを少しいじるだけで実装が
完了すること。



//文章にしてまとめておく必要のあるもの
ノーアップてなった⇨ヘロクのログを見た⇨スタートできてない？⇨パッケージのスタート設定っていう流れをまとめる
gitの使い方のダイジェスト



//忘れがちなコマンド類
//vLocal MongoDB access
$ mongo ds127190.mlab.com:27190/umvo -u test -p test

//heroku server logs
$ heroku logs -t

//git addCommit
git add .
git commit -m "COMMENT"

//git remote
git push -u origin master